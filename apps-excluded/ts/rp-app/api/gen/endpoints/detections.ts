/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Server | v1
 * OpenAPI spec version: 1.0.0
 */
import type {
  DataResponseOfICollectionOfRatDetectionDaySummaryDto,
  DataResponseOfICollectionOfRatDetectionDto,
  DataResponseOfRatDetectionDto,
  GetDailySummariesParams,
  GetDetectionsParams,
  SuccessResponse
} from '../schemas'
import { customFetch } from '../../mutator/custom-fetch';


export type recordDetectionResponse = {
  data: DataResponseOfRatDetectionDto;
  status: number;
  headers: Headers;
}

export const getRecordDetectionUrl = () => {


  return `/api/detections`
}

export const recordDetection = async ( options?: RequestInit): Promise<recordDetectionResponse> => {
  
  return customFetch<recordDetectionResponse>(getRecordDetectionUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type deleteAllDetectionsResponse = {
  data: SuccessResponse;
  status: number;
  headers: Headers;
}

export const getDeleteAllDetectionsUrl = () => {


  return `/api/detections`
}

export const deleteAllDetections = async ( options?: RequestInit): Promise<deleteAllDetectionsResponse> => {
  
  return customFetch<deleteAllDetectionsResponse>(getDeleteAllDetectionsUrl(),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


export type getDetectionsResponse = {
  data: DataResponseOfICollectionOfRatDetectionDto;
  status: number;
  headers: Headers;
}

export const getGetDetectionsUrl = (params?: GetDetectionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/detections?${normalizedParams.toString()}` : `/api/detections`
}

export const getDetections = async (params?: GetDetectionsParams, options?: RequestInit): Promise<getDetectionsResponse> => {
  
  return customFetch<getDetectionsResponse>(getGetDetectionsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type deleteDetectionResponse = {
  data: SuccessResponse;
  status: number;
  headers: Headers;
}

export const getDeleteDetectionUrl = (id: string,) => {


  return `/api/detections/${id}`
}

export const deleteDetection = async (id: string, options?: RequestInit): Promise<deleteDetectionResponse> => {
  
  return customFetch<deleteDetectionResponse>(getDeleteDetectionUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


export type simulateDetectionResponse = {
  data: SuccessResponse;
  status: number;
  headers: Headers;
}

export const getSimulateDetectionUrl = () => {


  return `/api/detections/simulations`
}

export const simulateDetection = async ( options?: RequestInit): Promise<simulateDetectionResponse> => {
  
  return customFetch<simulateDetectionResponse>(getSimulateDetectionUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type getDailySummariesResponse = {
  data: DataResponseOfICollectionOfRatDetectionDaySummaryDto;
  status: number;
  headers: Headers;
}

export const getGetDailySummariesUrl = (params?: GetDailySummariesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/detections/daily-summaries?${normalizedParams.toString()}` : `/api/detections/daily-summaries`
}

export const getDailySummaries = async (params?: GetDailySummariesParams, options?: RequestInit): Promise<getDailySummariesResponse> => {
  
  return customFetch<getDailySummariesResponse>(getGetDailySummariesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


